# Production Docker Compose for Raadi Marketplace
version: '3.8'

services:
  # Main web application
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: raadi_web
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://raadi_user:${DB_PASSWORD}@db:5432/raadi_prod
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
      - SENTRY_DSN=${SENTRY_DSN}
      - CORS_ORIGINS=["https://yourdomain.com"]
    depends_on:
      - db
      - redis
      - elasticsearch
    networks:
      - raadi_network
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: raadi_db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=raadi_prod
      - POSTGRES_USER=raadi_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=nb_NO.UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - raadi_network
    ports:
      - "5432:5432"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: raadi_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - raadi_network
    ports:
      - "6379:6379"

  # Elasticsearch
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: raadi_elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - raadi_network
    ports:
      - "9200:9200"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: raadi_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - uploads_data:/var/www/uploads
    depends_on:
      - web
    networks:
      - raadi_network

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: raadi_celery
    restart: unless-stopped
    command: celery -A app.celery_app worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://raadi_user:${DB_PASSWORD}@db:5432/raadi_prod
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
    depends_on:
      - db
      - redis
    networks:
      - raadi_network
    volumes:
      - uploads_data:/app/uploads

  # Celery Beat (Scheduler)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: raadi_celery_beat
    restart: unless-stopped
    command: celery -A app.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://raadi_user:${DB_PASSWORD}@db:5432/raadi_prod
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
    depends_on:
      - db
      - redis
    networks:
      - raadi_network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: raadi_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - raadi_network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: raadi_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - raadi_network

networks:
  raadi_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  uploads_data:
  logs_data:
  prometheus_data:
  grafana_data:
