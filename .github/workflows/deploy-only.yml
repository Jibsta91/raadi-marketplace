# Deployment-only Pipeline for Raadi Marketplace
name: Deploy to Production

on:
  workflow_dispatch:  # Manual trigger
    inputs:
      skip_tests:
        description: 'Skip tests and security scans'
        required: false
        default: true
        type: boolean

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: raadi-marketplace
  ECS_CLUSTER: raadi-marketplace-cluster
  ECS_SERVICE: raadi-marketplace-service

jobs:
  # Quick Build and Deploy
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image to ECR
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Init
      run: |
        cd infrastructure/terraform
        terraform init

    - name: Terraform Plan
      run: |
        cd infrastructure/terraform
        terraform plan -out=tfplan \
          -var="image_tag=${{ github.sha }}" \
          -var="ecr_repository_url=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}"

    - name: Terraform Apply
      run: |
        cd infrastructure/terraform
        terraform apply -auto-approve tfplan

    - name: Get ECS Service Info
      id: ecs-info
      run: |
        TASK_DEFINITION=$(aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --query 'services[0].taskDefinition' \
          --output text)
        echo "task-definition=$TASK_DEFINITION" >> $GITHUB_OUTPUT

    - name: Wait for deployment
      run: |
        echo "Waiting for ECS service to stabilize..."
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }}

    - name: Get Load Balancer URL
      id: get-url
      run: |
        ALB_DNS=$(aws elbv2 describe-load-balancers \
          --names raadi-marketplace-alb \
          --query 'LoadBalancers[0].DNSName' \
          --output text 2>/dev/null || echo "ALB not found")
        echo "Application URL: http://$ALB_DNS"
        echo "alb-url=http://$ALB_DNS" >> $GITHUB_OUTPUT

    - name: Health Check
      run: |
        ALB_URL="${{ steps.get-url.outputs.alb-url }}"
        if [ "$ALB_URL" != "http://" ]; then
          echo "Testing application health..."
          for i in {1..10}; do
            if curl -f "$ALB_URL/health" > /dev/null 2>&1; then
              echo "‚úÖ Application is healthy!"
              break
            else
              echo "‚è≥ Attempt $i: Waiting for application..."
              sleep 30
            fi
          done
        else
          echo "‚ö†Ô∏è Load balancer URL not found, skipping health check"
        fi

    - name: Deployment Summary
      run: |
        echo "üöÄ Deployment Summary:"
        echo "- Image: ${{ steps.meta.outputs.tags }}"
        echo "- ECS Cluster: ${{ env.ECS_CLUSTER }}"
        echo "- ECS Service: ${{ env.ECS_SERVICE }}"
        echo "- Region: ${{ env.AWS_REGION }}"
        echo "- Application URL: ${{ steps.get-url.outputs.alb-url }}"
        echo "‚úÖ Deployment completed successfully!"
